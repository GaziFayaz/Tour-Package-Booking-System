import { Repository } from 'typeorm';
import { Package, Slot, PackageFare, AdultInstallment, ChildInstallment, InfantInstallment, AdultAddon, ChildAddon, InfantAddon } from './packages.entity';
import type { CreatePackageDto, UpdatePackageDto, CreateSlotDto, UpdateSlotDto, CreatePackageFareDto, UpdatePackageFareDto, CreateAdultInstallmentDto, UpdateAdultInstallmentDto, CreateChildInstallmentDto, UpdateChildInstallmentDto, CreateInfantInstallmentDto, UpdateInfantInstallmentDto, CreateAdultAddonDto, UpdateAdultAddonDto, CreateChildAddonDto, UpdateChildAddonDto, CreateInfantAddonDto, UpdateInfantAddonDto, PackagePricingResponseDto } from './packages.dto';
export declare class PackagesService {
    private readonly packageRepository;
    private readonly slotRepository;
    private readonly packageFareRepository;
    private readonly adultInstallmentRepository;
    private readonly childInstallmentRepository;
    private readonly infantInstallmentRepository;
    private readonly adultAddonRepository;
    private readonly childAddonRepository;
    private readonly infantAddonRepository;
    constructor(packageRepository: Repository<Package>, slotRepository: Repository<Slot>, packageFareRepository: Repository<PackageFare>, adultInstallmentRepository: Repository<AdultInstallment>, childInstallmentRepository: Repository<ChildInstallment>, infantInstallmentRepository: Repository<InfantInstallment>, adultAddonRepository: Repository<AdultAddon>, childAddonRepository: Repository<ChildAddon>, infantAddonRepository: Repository<InfantAddon>);
    createPackage(createPackageDto: CreatePackageDto): Promise<Package>;
    findAllPackages(): Promise<Package[]>;
    findPackageById(id: number): Promise<Package | null>;
    updatePackage(id: number, updatePackageDto: UpdatePackageDto): Promise<Package | null>;
    removePackage(id: number): Promise<void>;
    createSlot(createSlotDto: CreateSlotDto): Promise<Slot>;
    findAllSlots(): Promise<Slot[]>;
    findSlotById(id: number): Promise<Slot | null>;
    updateSlot(id: number, updateSlotDto: UpdateSlotDto): Promise<Slot | null>;
    removeSlot(id: number): Promise<void>;
    createPackageFare(createPackageFareDto: CreatePackageFareDto): Promise<PackageFare>;
    findAllPackageFares(): Promise<PackageFare[]>;
    findPackageFareById(packageId: number, slotId: number): Promise<PackageFare | null>;
    updatePackageFare(packageId: number, slotId: number, updatePackageFareDto: UpdatePackageFareDto): Promise<PackageFare | null>;
    removePackageFare(packageId: number, slotId: number): Promise<void>;
    createAdultInstallment(createAdultInstallmentDto: CreateAdultInstallmentDto): Promise<AdultInstallment>;
    findAllAdultInstallments(): Promise<AdultInstallment[]>;
    findAdultInstallmentById(packageId: number, slotId: number): Promise<AdultInstallment | null>;
    updateAdultInstallment(packageId: number, slotId: number, updateAdultInstallmentDto: UpdateAdultInstallmentDto): Promise<AdultInstallment | null>;
    removeAdultInstallment(packageId: number, slotId: number): Promise<void>;
    createChildInstallment(createChildInstallmentDto: CreateChildInstallmentDto): Promise<ChildInstallment>;
    findAllChildInstallments(): Promise<ChildInstallment[]>;
    findChildInstallmentById(packageId: number, slotId: number): Promise<ChildInstallment | null>;
    updateChildInstallment(packageId: number, slotId: number, updateChildInstallmentDto: UpdateChildInstallmentDto): Promise<ChildInstallment | null>;
    removeChildInstallment(packageId: number, slotId: number): Promise<void>;
    createInfantInstallment(createInfantInstallmentDto: CreateInfantInstallmentDto): Promise<InfantInstallment>;
    findAllInfantInstallments(): Promise<InfantInstallment[]>;
    findInfantInstallmentById(packageId: number, slotId: number): Promise<InfantInstallment | null>;
    updateInfantInstallment(packageId: number, slotId: number, updateInfantInstallmentDto: UpdateInfantInstallmentDto): Promise<InfantInstallment | null>;
    removeInfantInstallment(packageId: number, slotId: number): Promise<void>;
    createAdultAddon(createAdultAddonDto: CreateAdultAddonDto): Promise<AdultAddon>;
    findAllAdultAddons(): Promise<AdultAddon[]>;
    findAdultAddonById(packageId: number, slotId: number): Promise<AdultAddon | null>;
    updateAdultAddon(packageId: number, slotId: number, updateAdultAddonDto: UpdateAdultAddonDto): Promise<AdultAddon | null>;
    removeAdultAddon(packageId: number, slotId: number): Promise<void>;
    createChildAddon(createChildAddonDto: CreateChildAddonDto): Promise<ChildAddon>;
    findAllChildAddons(): Promise<ChildAddon[]>;
    findChildAddonById(packageId: number, slotId: number): Promise<ChildAddon | null>;
    updateChildAddon(packageId: number, slotId: number, updateChildAddonDto: UpdateChildAddonDto): Promise<ChildAddon | null>;
    removeChildAddon(packageId: number, slotId: number): Promise<void>;
    createInfantAddon(createInfantAddonDto: CreateInfantAddonDto): Promise<InfantAddon>;
    findAllInfantAddons(): Promise<InfantAddon[]>;
    findInfantAddonById(packageId: number, slotId: number): Promise<InfantAddon | null>;
    updateInfantAddon(packageId: number, slotId: number, updateInfantAddonDto: UpdateInfantAddonDto): Promise<InfantAddon | null>;
    removeInfantAddon(packageId: number, slotId: number): Promise<void>;
    getPackagePricing(packageId: number, slotId: number): Promise<PackagePricingResponseDto | null>;
}
