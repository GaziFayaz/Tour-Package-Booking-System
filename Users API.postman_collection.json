{
	"info": {
		"_postman_id": "users-api-collection-2025",
		"name": "Users API",
		"description": "Complete Users API endpoints for the Tour Booking System with file upload support",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "users-api"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Ensure we have an access token for authenticated requests",
					"if (!pm.collectionVariables.get('access_token') && !pm.globals.get('access_token')) {",
					"    console.log('No access token found. Please run the Login request from Auth API collection first.');",
					"}"
				]
			}
		}
	],
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"pm.test(\"User created successfully\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.expect(responseJson).to.have.property('email');",
							"    pm.expect(responseJson).to.have.property('name');",
							"    pm.expect(responseJson).to.have.property('role');",
							"});",
							"",
							"// Store the created user ID for future requests",
							"if (pm.response.code === 200 || pm.response.code === 201) {",
							"    const responseJson = pm.response.json();",
							"    if (responseJson.id) {",
							"        pm.collectionVariables.set(\"userId\", responseJson.id);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "John Doe",
							"type": "text",
							"description": "User's full name"
						},
						{
							"key": "email",
							"value": "john.doe@example.com",
							"type": "text",
							"description": "User's email address"
						},
						{
							"key": "password",
							"value": "password123",
							"type": "text",
							"description": "User's password (min 6 characters)"
						},
						{
							"key": "phone",
							"value": "+1234567890",
							"type": "text",
							"description": "User's phone number"
						},
						{
							"key": "role",
							"value": "ADMIN",
							"type": "text",
							"description": "User role: ADMIN or SUPER_ADMIN"
						},
						{
							"key": "photo",
							"type": "file",
							"description": "User's profile photo (optional)",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				},
				"description": "Create a new user with optional photo upload. Only SUPER_ADMIN can create users."
			}
		},
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Users have required properties\", function () {",
							"    const responseJson = pm.response.json();",
							"    if (responseJson.length > 0) {",
							"        const user = responseJson[0];",
							"        pm.expect(user).to.have.property('id');",
							"        pm.expect(user).to.have.property('email');",
							"        pm.expect(user).to.have.property('name');",
							"        pm.expect(user).to.have.property('role');",
							"        pm.expect(user).to.not.have.property('password');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				},
				"description": "Get all users. Requires ADMIN or SUPER_ADMIN role."
			}
		},
		{
			"name": "Get User by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User has required properties\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.expect(responseJson).to.have.property('email');",
							"    pm.expect(responseJson).to.have.property('name');",
							"    pm.expect(responseJson).to.have.property('role');",
							"    pm.expect(responseJson).to.not.have.property('password');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				},
				"description": "Get a specific user by ID. Requires ADMIN or SUPER_ADMIN role."
			}
		},
		{
			"name": "Get User by Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User has required properties\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.expect(responseJson).to.have.property('email');",
							"    pm.expect(responseJson).to.have.property('name');",
							"    pm.expect(responseJson).to.have.property('role');",
							"    pm.expect(responseJson).to.not.have.property('password');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/email/{{userEmail}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"email",
						"{{userEmail}}"
					]
				},
				"description": "Get a user by email address. Requires ADMIN or SUPER_ADMIN role."
			}
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User updated successfully\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.expect(responseJson).to.have.property('email');",
							"    pm.expect(responseJson).to.have.property('name');",
							"    pm.expect(responseJson).to.have.property('role');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "John Doe Updated",
							"type": "text",
							"description": "Updated user name",
							"disabled": true
						},
						{
							"key": "email",
							"value": "john.updated@example.com",
							"type": "text",
							"description": "Updated email address",
							"disabled": true
						},
						{
							"key": "phone",
							"value": "+1987654321",
							"type": "text",
							"description": "Updated phone number",
							"disabled": true
						},
						{
							"key": "role",
							"value": "ADMIN",
							"type": "text",
							"description": "Updated role (SUPER_ADMIN only)",
							"disabled": true
						},
						{
							"key": "photo",
							"type": "file",
							"description": "New profile photo (optional)",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				},
				"description": "Update user information with optional photo upload. Only SUPER_ADMIN can update users."
			}
		},
		{
			"name": "Update User Photo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Photo updated successfully\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.expect(responseJson).to.have.property('photoUrl');",
							"    pm.expect(responseJson).to.have.property('photoPublicId');",
							"    pm.expect(responseJson.photoUrl).to.not.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "photo",
							"type": "file",
							"description": "New profile photo (required for this endpoint)"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/photo",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"photo"
					]
				},
				"description": "Update only the user's profile photo. Requires ADMIN or SUPER_ADMIN role. Photo file is required."
			}
		},
		{
			"name": "Remove User Photo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Photo removed successfully\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.expect(responseJson.photoUrl).to.be.null;",
							"    pm.expect(responseJson.photoPublicId).to.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/photo",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"photo"
					]
				},
				"description": "Remove the user's profile photo. Requires ADMIN or SUPER_ADMIN role."
			}
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User deleted successfully\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('message');",
							"    pm.expect(responseJson.message).to.include('deleted successfully');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				},
				"description": "Delete a user completely. Only SUPER_ADMIN can delete users. This also removes associated photos from Cloudinary."
			}
		}
	],
	"variable": [
		{
			"key": "userId",
			"value": "1",
			"type": "string",
			"description": "ID of the user to perform operations on"
		},
		{
			"key": "userEmail",
			"value": "admin@example.com",
			"type": "string",
			"description": "Email address to search for"
		}
	]
}
